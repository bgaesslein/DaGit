package main

import (
	"embed"
	"fmt"
	"io/fs"
	"log"
	"net/http"
	"os"
	"time"

	_ "github.com/mattn/go-sqlite3"
	"github.com/urfave/cli/v2"
)

//go:embed all:nextjs/dist
var nextFS embed.FS
var repo *Repo

func main() {

	// Root at the `dist` folder generated by the Next.js app.
	distFS, err := fs.Sub(nextFS, "nextjs/dist")
	if err != nil {
		log.Fatal(err)
	}

	app := &cli.App{
		UseShortOptionHandling: true,
		Name:                   "dagit",
		Version:                "v1.0.0",
		Compiled:               time.Now(),
		Authors: []*cli.Author{
			&cli.Author{
				Name:  "Joseph Doiron",
				Email: "",
			},
		},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "repo-path",
				Value:   ".",
				Aliases: []string{"r"},
				Usage:   "",
			},
		},
		Commands: []*cli.Command{
			{
				Name:  "to-sqlite",
				Usage: "Generates a SQLite database representing the Git repo.",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "db-path",
						Value:   "git.sqlite",
						Aliases: []string{"d"},
						Usage:   "The path to the database to output.",
					},
				},
				Action: func(cCtx *cli.Context) error {
					repo := newRepo(cCtx.String("repo-path"))
					repo.toSQLite(cCtx.String("db-path"))
					return nil
				},
			},
			{
				Name:  "start-app",
				Usage: "Starts the DaGit app.",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "repo-path",
						Value:   ".",
						Aliases: []string{"r"},
						Usage:   "todo",
					},
				},
				Action: func(cCtx *cli.Context) error {
					dir := cCtx.String("repo-path")
					repo = newRepo(dir)
					// The static Next.js app will be served under `/`.
					http.Handle("/", http.FileServer(http.FS(distFS)))
					http.HandleFunc("/ws", serveWs)
					server := &http.Server{
						Addr:              ":8080",
						ReadHeaderTimeout: 3 * time.Second,
					}
					log.Println("Starting HTTP server at http://localhost:8080 ...")
					if err := server.ListenAndServe(); err != nil {
						log.Fatal(err)
					}
					return nil
				},
			},
			{
				Name:  "show",
				Usage: "Shows the content of a Git object.",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "object",
						Aliases: []string{"o"},
						Usage:   "Pass multiple greetings",
					},
					&cli.BoolFlag{Name: "type", Aliases: []string{"t"}},
				},
				Action: func(cCtx *cli.Context) error {
					repo := newRepo(cCtx.String("repo-path"))
					if cCtx.String("object") == "" {
						fmt.Println(string(repo.toJson()))
					} else {
						obj := repo.getObject(cCtx.String("object"))
						if cCtx.Bool("type") {
							fmt.Println(obj.Type_)
						} else {
							fmt.Println(string(obj.toJson()[:]))
						}
					}
					return nil
				},
			},
		},
	}

	if err := app.Run(os.Args); err != nil {
		log.Fatal(err)
	}
}
